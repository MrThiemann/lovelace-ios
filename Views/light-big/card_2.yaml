type: vertical-stack
cards:
  - type: vertical-stack
    cards:
      - name: Küche
        template:
          - header
        tap_action:
          action: navigate
          navigation_path: /lovelace-ios/tab_kueche
        type: custom:button-card
      - type: horizontal-stack
        cards:
          - type: custom:button-card
            entity: light.kuechensockel
            icon: phu:light-strip
            name: Sockel
            show_icon: true
            aspect_ratio: 1/1
            show_state: true
            template:
              - kt_card_2
              - popup_light_rgb
            custom_fields:
              bright: |
                [[[
                  function capitalizeFirstLetter(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                  }
                  
                  const length = 41;
                  const width = 3;

                  if (entity.state === 'on' && entity.attributes.brightness) {
                    const radius = length / 2;
                    const brightness = Math.round(entity.attributes.brightness / 2.54);
                    const circumference = radius * 2 * Math.PI;
                    return `
                      <svg viewBox="0 0 50 50">
                        <circle style="
                            transform: rotate(-90deg);
                            transform-origin: 50% 50%;
                            stroke-dasharray: ${circumference};
                            stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                          "
                          id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                        <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                        </text>
                      </svg>
                      `;
                    }
                  else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                    const text = capitalizeFirstLetter(entity.attributes.speed);
                    const gap = 5;
                    const edge = (50 - length) / 2;
                    const y = 50 - edge;
                    var items = entity.attributes.speed_list;
                    if (items.indexOf('off') !== -1){
                      items.splice(items.indexOf('off'), 1);
                    }
                    const current = items.indexOf(entity.attributes.speed)
                    var i;
                    var x1 = edge;
                    var ret = `<svg  viewBox="0 0 50 50">`;
                    var l = (length - gap * (items.length - 1)) / items.length;
                    for (i = 0; i < items.length; i++) {
                      var x2 = x1 + l;
                      var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                      var opacity = (i <= current) ? "1.0" : "0.5";
                      ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                      x1 = x2 + gap;
                    }
                    ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                    return ret;
                  }
                ]]]
              cl:
                card:
                  type: custom:button-card
                  icon: mdi:palette
                  name: false
                  entity_picture: |

                    [[[if (entity.state == 'none')

                    return "/local/whitecl.png";

                    else

                    return "/local/multic.png";

                    ]]]
                  show_entity_picture: true
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 15px
              bm:
                card:
                  entity: binary_sensor.presence_12
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                      - margin-bottom: 100%
                    icon:
                      - width: 15px
                  layout: vertical
                  name: []
                  state:
                    - value: 'on'
                      styles:
                        state:
                          - color: green
                        card:
                          - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                          - border: 0px
                        icon:
                          - color: rgb(255,0,0)
                    - value: 'off'
                      styles:
                        name: null
                        icon:
                          - color: green
                          - icon: mdi:security
                  type: custom:button-card
          - type: custom:button-card
            entity: light.candle_rgb_cct_3
            icon: phu:pendant-round
            name: Decke Küche
            show_icon: true
            aspect_ratio: 1/1
            hold_action:
              action: more-info
            tap_action:
              action: toggle
            show_state: true
            template:
              - kt_card_2
              - popup_light_rgb
            custom_fields:
              bright: |
                [[[
                  function capitalizeFirstLetter(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                  }
                  
                  const length = 41;
                  const width = 3;

                  if (entity.state === 'on' && entity.attributes.brightness) {
                    const radius = length / 2;
                    const brightness = Math.round(entity.attributes.brightness / 2.54);
                    const circumference = radius * 2 * Math.PI;
                    return `
                      <svg viewBox="0 0 50 50">
                        <circle style="
                            transform: rotate(-90deg);
                            transform-origin: 50% 50%;
                            stroke-dasharray: ${circumference};
                            stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                          "
                          id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                        <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                        </text>
                      </svg>
                      `;
                    }
                  else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                    const text = capitalizeFirstLetter(entity.attributes.speed);
                    const gap = 5;
                    const edge = (50 - length) / 2;
                    const y = 50 - edge;
                    var items = entity.attributes.speed_list;
                    if (items.indexOf('off') !== -1){
                      items.splice(items.indexOf('off'), 1);
                    }
                    const current = items.indexOf(entity.attributes.speed)
                    var i;
                    var x1 = edge;
                    var ret = `<svg  viewBox="0 0 50 50">`;
                    var l = (length - gap * (items.length - 1)) / items.length;
                    for (i = 0; i < items.length; i++) {
                      var x2 = x1 + l;
                      var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                      var opacity = (i <= current) ? "1.0" : "0.5";
                      ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                      x1 = x2 + gap;
                    }
                    ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                    return ret;
                  }
                ]]]
              cl:
                card:
                  type: custom:button-card
                  icon: mdi:palette
                  name: false
                  entity_picture: /local/whitecl.png
                  show_entity_picture: true
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 15px
          - type: custom:button-card
            entity: light.candle_rgb_cct_3
            icon: phu:bulbs-spot
            name: Spot
            show_icon: true
            aspect_ratio: 1/1
            hold_action:
              action: more-info
            tap_action:
              action: toggle
            show_state: true
            template:
              - kt_card_2
              - popup_light_rgb
            custom_fields:
              bright: |
                [[[
                  function capitalizeFirstLetter(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                  }
                  
                  const length = 41;
                  const width = 3;

                  if (entity.state === 'on' && entity.attributes.brightness) {
                    const radius = length / 2;
                    const brightness = Math.round(entity.attributes.brightness / 2.54);
                    const circumference = radius * 2 * Math.PI;
                    return `
                      <svg viewBox="0 0 50 50">
                        <circle style="
                            transform: rotate(-90deg);
                            transform-origin: 50% 50%;
                            stroke-dasharray: ${circumference};
                            stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                          "
                          id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                        <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                        </text>
                      </svg>
                      `;
                    }
                  else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                    const text = capitalizeFirstLetter(entity.attributes.speed);
                    const gap = 5;
                    const edge = (50 - length) / 2;
                    const y = 50 - edge;
                    var items = entity.attributes.speed_list;
                    if (items.indexOf('off') !== -1){
                      items.splice(items.indexOf('off'), 1);
                    }
                    const current = items.indexOf(entity.attributes.speed)
                    var i;
                    var x1 = edge;
                    var ret = `<svg  viewBox="0 0 50 50">`;
                    var l = (length - gap * (items.length - 1)) / items.length;
                    for (i = 0; i < items.length; i++) {
                      var x2 = x1 + l;
                      var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                      var opacity = (i <= current) ? "1.0" : "0.5";
                      ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                      x1 = x2 + gap;
                    }
                    ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                    return ret;
                  }
                ]]]
              cl:
                card:
                  type: custom:button-card
                  icon: mdi:palette
                  name: false
                  entity_picture: /local/multic.png
                  show_entity_picture: true
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 15px
      - type: horizontal-stack
        cards:
          - type: custom:button-card
            entity: light.kuechensockel
            icon: phu:light-strip
            name: Sockel neu
            template:
              - kt_card_2
              - light
              - bright
              - cl
            custom_fields:
              bm:
                card:
                  entity: binary_sensor.presence_12
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon: null
                  layout: vertical
                  name: []
                  state:
                    - value: 'on'
                      styles:
                        state:
                          - color: green
                        card:
                          - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                          - border: 0px
                        icon:
                          - color: rgb(255,0,0)
                          - width: 15px;
                    - value: 'off'
                      styles:
                        name: null
                        icon:
                          - color: green
                          - icon: mdi:security
                          - width: 15px;
                  type: custom:button-card
          - type: custom:button-card
            entity: switch.tp_link_01
            icon: phu:bulbs-spot
            name: Oberboden
            hold_action:
              action: more-info
            tap_action:
              action: toggle
            template:
              - kt_card_2
              - popup_light_rgb
              - light
            custom_fields:
              cl:
                card:
                  type: custom:button-card
                  icon: hue:plug-eu
                  name: false
                  entity_picture: /local/whitecl.png
                  show_entity_picture: false
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 100%
          - type: custom:button-card
            color_type: blank-card
      - type: horizontal-stack
        cards:
          - type: custom:button-card
            color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
  - type: custom:button-card
    color_type: blank-card
  - type: vertical-stack
    cards:
      - type: vertical-stack
        cards:
          - name: '[[[ return `Wohnzimmer - ${states[''sensor.wz_temp''].state}°` ]]]'
            tap_action:
              action: navigate
              navigation_path: /lovelace-ios/tab4
            template:
              - header
            type: custom:button-card
            hold_action:
              action: fire-dom-event
              browser_mod:
                command: popup
                title: Heizung
                style:
                  hui-vertical-stack-card:
                    $hui-entities-card$: |
                      #states {
                        padding-top: 0.5em;
                        padding-bottom: 0em;
                      }
                card:
                  type: vertical-stack
                  cards:
                    - type: custom:thermostat-popup-card
                      entity: climate.fritz_dect_301_2_wohnzimmer
                      brightnessWidth: 150px
                      brightnessHeight: 400px
                      switchWidth: 150px
                      switchHeight: 400px
                      fullscreen: false
                    - type: entities
                      card_mod:
                        class: content
                      entities:
                        - entity: sensor.wz_temp
                          name: Raumtemperatur
                        - entity: sensor.humiditiy_sensor
                          name: Luftfeuchtigkeit
                    - type: custom:apexcharts-card
                      layout: minimal
                      locale: se
                      graph_span: 8h
                      show:
                        loading: false
                      apex_config:
                        plotOptions:
                          area:
                            fillTo: end
                        grid:
                          padding:
                            top: -15
                        fill:
                          type: gradient
                          gradient:
                            type: vertical
                            opacityFrom: 0.8
                            opacityTo: 0
                            stops:
                              - 0
                              - 99
                              - 100
                        stroke:
                          width: 4
                        tooltip:
                          style:
                            fontSize: 14px
                          x:
                            format: dddd HH:mm
                        chart:
                          height: 140px
                          offsetY: '-20px'
                        xaxis:
                          crosshairs:
                            show: false
                      series:
                        - entity: sensor.wz_temp
                          name: Temp
                          color: '#385581'
                          type: area
                          fill_raw: last
                          group_by:
                            func: avg
                            duration: 1h
            variables:
              circle_input: |
                [[[
                  if (entity) {
                    return entity.state === 'cool' ?
                      entity.attributes.temperature :
                      entity.attributes.current_temperature;
                  }
                ]]]
          - type: horizontal-stack
            cards:
              - type: custom:button-card
                entity: switch.tp_link_01
                icon: phu:table-shade
                name: Tischlampe
                show_icon: true
                aspect_ratio: 1/1
                hold_action:
                  action: more-info
                tap_action:
                  action: toggle
                show_state: true
                template:
                  - kt_card_2
                  - popup_light_rgb
                custom_fields:
                  bright: |
                    [[[
                      function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                      }
                      
                      const length = 41;
                      const width = 3;

                      if (entity.state === 'on' && entity.attributes.brightness) {
                        const radius = length / 2;
                        const brightness = Math.round(entity.attributes.brightness / 2.54);
                        const circumference = radius * 2 * Math.PI;
                        return `
                          <svg viewBox="0 0 50 50">
                            <circle style="
                                transform: rotate(-90deg);
                                transform-origin: 50% 50%;
                                stroke-dasharray: ${circumference};
                                stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                              "
                              id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                            </text>
                          </svg>
                          `;
                        }
                      else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                        const text = capitalizeFirstLetter(entity.attributes.speed);
                        const gap = 5;
                        const edge = (50 - length) / 2;
                        const y = 50 - edge;
                        var items = entity.attributes.speed_list;
                        if (items.indexOf('off') !== -1){
                          items.splice(items.indexOf('off'), 1);
                        }
                        const current = items.indexOf(entity.attributes.speed)
                        var i;
                        var x1 = edge;
                        var ret = `<svg  viewBox="0 0 50 50">`;
                        var l = (length - gap * (items.length - 1)) / items.length;
                        for (i = 0; i < items.length; i++) {
                          var x2 = x1 + l;
                          var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                          var opacity = (i <= current) ? "1.0" : "0.5";
                          ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                          x1 = x2 + gap;
                        }
                        ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                        return ret;
                      }
                    ]]]
                  cl:
                    card:
                      type: custom:button-card
                      icon: mdi:palette
                      name: false
                      entity_picture: /local/whitecl.png
                      show_entity_picture: true
                      show_name: false
                      styles:
                        card:
                          - background-color: '#242e42'
                          - height: 25px
                          - width: 25px
                        icon:
                          - width: 15px
              - type: custom:button-card
                entity: light.wandlampe_wohnzimmer
                icon: hue:wall-fuzo-h
                name: Wandlampe
                show_icon: true
                aspect_ratio: 1/1
                hold_action:
                  action: more-info
                tap_action:
                  action: toggle
                show_state: true
                template:
                  - kt_card_2
                  - popup_light_rgb
                custom_fields:
                  bright: |
                    [[[
                      function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                      }
                      
                      const length = 41;
                      const width = 3;

                      if (entity.state === 'on' && entity.attributes.brightness) {
                        const radius = length / 2;
                        const brightness = Math.round(entity.attributes.brightness / 2.54);
                        const circumference = radius * 2 * Math.PI;
                        return `
                          <svg viewBox="0 0 50 50">
                            <circle style="
                                transform: rotate(-90deg);
                                transform-origin: 50% 50%;
                                stroke-dasharray: ${circumference};
                                stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                              "
                              id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                            </text>
                          </svg>
                          `;
                        }
                      else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                        const text = capitalizeFirstLetter(entity.attributes.speed);
                        const gap = 5;
                        const edge = (50 - length) / 2;
                        const y = 50 - edge;
                        var items = entity.attributes.speed_list;
                        if (items.indexOf('off') !== -1){
                          items.splice(items.indexOf('off'), 1);
                        }
                        const current = items.indexOf(entity.attributes.speed)
                        var i;
                        var x1 = edge;
                        var ret = `<svg  viewBox="0 0 50 50">`;
                        var l = (length - gap * (items.length - 1)) / items.length;
                        for (i = 0; i < items.length; i++) {
                          var x2 = x1 + l;
                          var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                          var opacity = (i <= current) ? "1.0" : "0.5";
                          ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                          x1 = x2 + gap;
                        }
                        ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                        return ret;
                      }
                    ]]]
                  cl:
                    card:
                      type: custom:button-card
                      icon: mdi:palette
                      name: false
                      entity_picture: /local/multic.png
                      show_entity_picture: true
                      show_name: false
                      styles:
                        card:
                          - background-color: '#242e42'
                          - height: 25px
                          - width: 25px
                        icon:
                          - width: 15px
              - type: custom:button-card
                entity: switch.tp_link_01
                icon: phu:pendant-round
                name: Deckenlampe
                show_icon: true
                aspect_ratio: 1/1
                hold_action:
                  action: more-info
                tap_action:
                  action: toggle
                show_state: true
                template:
                  - kt_card_2
                  - popup_light_rgb
                custom_fields:
                  bright: |
                    [[[
                      function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                      }
                      
                      const length = 41;
                      const width = 3;

                      if (entity.state === 'on' && entity.attributes.brightness) {
                        const radius = length / 2;
                        const brightness = Math.round(entity.attributes.brightness / 2.54);
                        const circumference = radius * 2 * Math.PI;
                        return `
                          <svg viewBox="0 0 50 50">
                            <circle style="
                                transform: rotate(-90deg);
                                transform-origin: 50% 50%;
                                stroke-dasharray: ${circumference};
                                stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                              "
                              id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                            </text>
                          </svg>
                          `;
                        }
                      else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                        const text = capitalizeFirstLetter(entity.attributes.speed);
                        const gap = 5;
                        const edge = (50 - length) / 2;
                        const y = 50 - edge;
                        var items = entity.attributes.speed_list;
                        if (items.indexOf('off') !== -1){
                          items.splice(items.indexOf('off'), 1);
                        }
                        const current = items.indexOf(entity.attributes.speed)
                        var i;
                        var x1 = edge;
                        var ret = `<svg  viewBox="0 0 50 50">`;
                        var l = (length - gap * (items.length - 1)) / items.length;
                        for (i = 0; i < items.length; i++) {
                          var x2 = x1 + l;
                          var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                          var opacity = (i <= current) ? "1.0" : "0.5";
                          ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                          x1 = x2 + gap;
                        }
                        ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                        return ret;
                      }
                    ]]]
                  cl:
                    card:
                      type: custom:button-card
                      icon: mdi:palette
                      name: false
                      entity_picture: /local/whitecl.png
                      show_entity_picture: true
                      show_name: false
                      styles:
                        card:
                          - background-color: '#242e42'
                          - height: 25px
                          - width: 25px
                        icon:
                          - width: 15px
          - type: horizontal-stack
            cards:
              - type: custom:button-card
                entity: light.tybf4da595f9235af6dbrfhn
                icon: hue:go
                name: Vitrine
                show_icon: true
                aspect_ratio: 1/1
                hold_action:
                  action: more-info
                tap_action:
                  action: toggle
                show_state: true
                template:
                  - kt_card_2
                  - popup_light_rgb
                custom_fields:
                  bright: |
                    [[[
                      function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                      }
                      
                      const length = 41;
                      const width = 3;

                      if (entity.state === 'on' && entity.attributes.brightness) {
                        const radius = length / 2;
                        const brightness = Math.round(entity.attributes.brightness / 2.54);
                        const circumference = radius * 2 * Math.PI;
                        return `
                          <svg viewBox="0 0 50 50">
                            <circle style="
                                transform: rotate(-90deg);
                                transform-origin: 50% 50%;
                                stroke-dasharray: ${circumference};
                                stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                              "
                              id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                            </text>
                          </svg>
                          `;
                        }
                      else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                        const text = capitalizeFirstLetter(entity.attributes.speed);
                        const gap = 5;
                        const edge = (50 - length) / 2;
                        const y = 50 - edge;
                        var items = entity.attributes.speed_list;
                        if (items.indexOf('off') !== -1){
                          items.splice(items.indexOf('off'), 1);
                        }
                        const current = items.indexOf(entity.attributes.speed)
                        var i;
                        var x1 = edge;
                        var ret = `<svg  viewBox="0 0 50 50">`;
                        var l = (length - gap * (items.length - 1)) / items.length;
                        for (i = 0; i < items.length; i++) {
                          var x2 = x1 + l;
                          var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                          var opacity = (i <= current) ? "1.0" : "0.5";
                          ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                          x1 = x2 + gap;
                        }
                        ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                        return ret;
                      }
                    ]]]
                  cl:
                    card:
                      type: custom:button-card
                      icon: mdi:palette
                      name: false
                      entity_picture: /local/multic.png
                      show_entity_picture: true
                      show_name: false
                      styles:
                        card:
                          - background-color: '#242e42'
                          - height: 25px
                          - width: 25px
                        icon:
                          - width: 15px
              - type: custom:button-card
                entity: light.lsc_light_strip_rgbcw_wifi_2
                icon: hue:lightstrip-tv
                name: RGB Wohnwand
                show_icon: true
                aspect_ratio: 1/1
                hold_action:
                  action: more-info
                tap_action:
                  action: toggle
                show_state: true
                template:
                  - kt_card_2
                  - popup_light_rgb
                custom_fields:
                  bright: |
                    [[[
                      function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                      }
                      
                      const length = 41;
                      const width = 3;

                      if (entity.state === 'on' && entity.attributes.brightness) {
                        const radius = length / 2;
                        const brightness = Math.round(entity.attributes.brightness / 2.54);
                        const circumference = radius * 2 * Math.PI;
                        return `
                          <svg viewBox="0 0 50 50">
                            <circle style="
                                transform: rotate(-90deg);
                                transform-origin: 50% 50%;
                                stroke-dasharray: ${circumference};
                                stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                              "
                              id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                            </text>
                          </svg>
                          `;
                        }
                      else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                        const text = capitalizeFirstLetter(entity.attributes.speed);
                        const gap = 5;
                        const edge = (50 - length) / 2;
                        const y = 50 - edge;
                        var items = entity.attributes.speed_list;
                        if (items.indexOf('off') !== -1){
                          items.splice(items.indexOf('off'), 1);
                        }
                        const current = items.indexOf(entity.attributes.speed)
                        var i;
                        var x1 = edge;
                        var ret = `<svg  viewBox="0 0 50 50">`;
                        var l = (length - gap * (items.length - 1)) / items.length;
                        for (i = 0; i < items.length; i++) {
                          var x2 = x1 + l;
                          var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                          var opacity = (i <= current) ? "1.0" : "0.5";
                          ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                          x1 = x2 + gap;
                        }
                        ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                        return ret;
                      }
                    ]]]
                  cl:
                    card:
                      type: custom:button-card
                      icon: mdi:palette
                      name: false
                      entity_picture: /local/multic.png
                      show_entity_picture: true
                      show_name: false
                      styles:
                        card:
                          - background-color: '#242e42'
                          - height: 25px
                          - width: 25px
                        icon:
                          - width: 15px
              - type: custom:button-card
                entity: light.tybfbfbb83505dd21d54yzwe
                icon: hue:go
                name: Vitrine
                show_icon: true
                aspect_ratio: 1/1
                hold_action:
                  action: more-info
                tap_action:
                  action: toggle
                show_state: true
                template:
                  - kt_card_2
                  - popup_light_rgb
                custom_fields:
                  bright: |
                    [[[
                      function capitalizeFirstLetter(string) {
                        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                      }
                      
                      const length = 41;
                      const width = 3;

                      if (entity.state === 'on' && entity.attributes.brightness) {
                        const radius = length / 2;
                        const brightness = Math.round(entity.attributes.brightness / 2.54);
                        const circumference = radius * 2 * Math.PI;
                        return `
                          <svg viewBox="0 0 50 50">
                            <circle style="
                                transform: rotate(-90deg);
                                transform-origin: 50% 50%;
                                stroke-dasharray: ${circumference};
                                stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                              "
                              id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                            </text>
                          </svg>
                          `;
                        }
                      else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                        const text = capitalizeFirstLetter(entity.attributes.speed);
                        const gap = 5;
                        const edge = (50 - length) / 2;
                        const y = 50 - edge;
                        var items = entity.attributes.speed_list;
                        if (items.indexOf('off') !== -1){
                          items.splice(items.indexOf('off'), 1);
                        }
                        const current = items.indexOf(entity.attributes.speed)
                        var i;
                        var x1 = edge;
                        var ret = `<svg  viewBox="0 0 50 50">`;
                        var l = (length - gap * (items.length - 1)) / items.length;
                        for (i = 0; i < items.length; i++) {
                          var x2 = x1 + l;
                          var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                          var opacity = (i <= current) ? "1.0" : "0.5";
                          ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                          x1 = x2 + gap;
                        }
                        ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                        return ret;
                      }
                    ]]]
                  cl:
                    card:
                      type: custom:button-card
                      icon: mdi:palette
                      name: false
                      entity_picture: /local/multic.png
                      show_entity_picture: true
                      show_name: false
                      styles:
                        card:
                          - background-color: '#242e42'
                          - height: 25px
                          - width: 25px
                        icon:
                          - width: 15px
      - type: vertical-stack
        cards: []
  - type: vertical-stack
    cards: []
  - type: vertical-stack
    cards:
      - name: Büro
        template:
          - header
          - header_temp_var
          - header_door_var
        type: custom:button-card
        triggers_update: all
        variables:
          temp: sensor.wz_temp
          door: binary_sensor.ty13600724840d8eae6714
      - type: horizontal-stack
        cards:
          - type: custom:button-card
            entity: switch.tp_link_01
            icon: hue:desk-lamp
            color: auto
            name: Schreibtisch
            show_icon: true
            aspect_ratio: 1/1
            hold_action:
              action: more-info
            tap_action:
              action: toggle
            show_state: true
            template: kt_card_2
            custom_fields:
              cl:
                card:
                  type: custom:button-card
                  icon: hue:plug-eu
                  name: false
                  entity_picture: /local/whitecl.png
                  show_entity_picture: false
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 100%
          - type: custom:button-card
            entity: light.candle_rgb_cct_3
            icon: phu:pendant-round
            name: Decke Büro
            show_icon: true
            aspect_ratio: 1/1
            hold_action:
              action: more-info
            tap_action:
              action: toggle
            show_state: true
            template: kt_card_2
            custom_fields:
              bright: |
                [[[
                  var b = entity.attributes.brightness ? Math.round(entity.attributes.brightness/2.55) : '';
                  return parseInt(b ? b/2.55 : '0') + '%';
                ]]]
              cl:
                card:
                  type: custom:button-card
                  icon: mdi:palette
                  name: false
                  entity_picture: /local/whitecl.png
                  show_entity_picture: true
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 15px
          - type: custom:button-card
            entity: light.holzlampe_schreibtisch
            icon: phu:table-shade
            show_icon: true
            aspect_ratio: 1/1
            hold_action:
              action: more-info
            tap_action:
              action: toggle
            name: Tischlampe
            show_state: true
            template:
              - kt_card_2
              - popup_light_rgb
            custom_fields:
              bright: |
                [[[
                  function capitalizeFirstLetter(string) {
                    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                  }
                  
                  const length = 41;
                  const width = 3;

                  if (entity.state === 'on' && entity.attributes.brightness) {
                    const radius = length / 2;
                    const brightness = Math.round(entity.attributes.brightness / 2.54);
                    const circumference = radius * 2 * Math.PI;
                    return `
                      <svg viewBox="0 0 50 50">
                        <circle style="
                            transform: rotate(-90deg);
                            transform-origin: 50% 50%;
                            stroke-dasharray: ${circumference};
                            stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                          "
                          id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                        <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                        </text>
                      </svg>
                      `;
                    }
                  else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                    const text = capitalizeFirstLetter(entity.attributes.speed);
                    const gap = 5;
                    const edge = (50 - length) / 2;
                    const y = 50 - edge;
                    var items = entity.attributes.speed_list;
                    if (items.indexOf('off') !== -1){
                      items.splice(items.indexOf('off'), 1);
                    }
                    const current = items.indexOf(entity.attributes.speed)
                    var i;
                    var x1 = edge;
                    var ret = `<svg  viewBox="0 0 50 50">`;
                    var l = (length - gap * (items.length - 1)) / items.length;
                    for (i = 0; i < items.length; i++) {
                      var x2 = x1 + l;
                      var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                      var opacity = (i <= current) ? "1.0" : "0.5";
                      ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                      x1 = x2 + gap;
                    }
                    ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                    return ret;
                  }
                ]]]
              cl:
                card:
                  type: custom:button-card
                  icon: mdi:palette
                  name: false
                  entity_picture: /local/whitecl.png
                  show_entity_picture: true
                  show_name: false
                  styles:
                    card:
                      - background-color: '#242e42'
                      - height: 25px
                      - width: 25px
                    icon:
                      - width: 15px
      - type: horizontal-stack
        cards:
          - type: custom:button-card
            color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
      - type: horizontal-stack
        cards:
          - type: custom:button-card
            color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
