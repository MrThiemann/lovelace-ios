  - theme: KT Dark
    title: light2
    path: light2
    icon: mdi:lightbulb-multiple
    badges: []
    cards:
      - type: vertical-stack
        cards:
          - type: vertical-stack
            cards:
              - name: Flur
                template:
                  - header
                type: custom:button-card
                styles:
                  grid:
                    - grid-template-areas: '"n i"'
                    - grid-template-columns: 1.5fr min-content
                    - grid-template-rows: 1fr min-content min-content
                  icon:
                    - width: 15px
                icon: |
                  [[[
                    if (states['binary_sensor.Entit채t_Presence'].state == 'on') return 'phu:panel-frontdoor-open';
                    return 'phu:panel-frontdoor-close';
                  ]]]
                state:
                  - value: 'on'
                    styles:
                      card:
                        - background-color: gold
                      name:
                        - color: black
                      icon:
                        - color: yellow
                        - opacity: 0.5
                  - value: 'off'
                    styles:
                      card:
                        - background-color: slategrey
                      icon:
                        - color: yellow
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:wall-fuzo-h
                    name: Haust체r
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/whitecl.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: phu:bulbs-spot
                    name: Decke Flur EG
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/whitecl.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:wall-shade
                    name: Wandlampe Flur
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/multic.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:wall-appear
                    name: Wandlampe Treppe
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                    custom_fields:
                      bm:
                        card:
                          entity: binary_sensor.Entit채t_Presence
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon: null
                          layout: vertical
                          name: []
                          state:
                            - value: 'on'
                              styles:
                                state:
                                  - color: green
                                card:
                                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                  - border: 0px
                                icon:
                                  - color: rgb(255,0,0)
                                  - width: 15px;
                            - value: 'off'
                              styles:
                                name: null
                                icon:
                                  - color: green
                                  - icon: mdi:security
                                  - width: 15px;
                          type: custom:button-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
          - type: vertical-stack
            cards:
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
              - type: vertical-stack
                cards: []
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Bad & WC
                    template:
                      - header
                      - header_door_var
                    type: custom:button-card
                    variables:
                      temp: sensor.wz_temp
                      door: binary_sensor.Entit채t_Presence
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:room-toilet
                        name: WC
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                        custom_fields:
                          bm:
                            card:
                              entity: binary_sensor.Entit채t_Presence
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon: null
                              layout: vertical
                              name: []
                              state:
                                - value: 'on'
                                  styles:
                                    state:
                                      - color: green
                                    card:
                                      - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                      - border: 0px
                                    icon:
                                      - color: rgb(255,0,0)
                                      - width: 15px;
                                - value: 'off'
                                  styles:
                                    name: null
                                    icon:
                                      - color: green
                                      - icon: mdi:security
                                      - width: 15px;
                              type: custom:button-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards:
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: fas:shower
                        name: Deckenlampe
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/whitecl.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:wall-fuzo
                        name: Spiegel
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/whitecl.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
          - type: vertical-stack
            cards: []
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Garten
                    template:
                      - header
                    tap_action:
                      action: navigate
                      navigation_path: /lovelace-ios/tab7
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:flourish-alt
                        name: Kartenkugel
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:flourish-alt
                        name: Kartenkugel
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:bulb-group-bollard-3
                        name: Pool
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:bulb-group-bollard-3
                        name: Pool
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:lightstrip
                        name: LED Terrasse
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: mdi:grill-outline
                        name: LED Grill
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards:
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
      - type: vertical-stack
        cards:
          - type: vertical-stack
            cards:
              - name: K체che
                template:
                  - header
                tap_action:
                  action: navigate
                  navigation_path: /lovelace-ios/tab_kueche
                type: custom:button-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: phu:light-strip
                    name: Sockel
                    show_icon: true
                    aspect_ratio: 1/1
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: |

                            [[[if (entity.state == 'none')

                            return "/local/whitecl.png";

                            else

                            return "/local/multic.png";

                            ]]]
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                      bm:
                        card:
                          entity: binary_sensor.Entit채t_Presence
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                              - margin-bottom: 100%
                            icon:
                              - width: 15px
                          layout: vertical
                          name: []
                          state:
                            - value: 'on'
                              styles:
                                state:
                                  - color: green
                                card:
                                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                  - border: 0px
                                icon:
                                  - color: rgb(255,0,0)
                            - value: 'off'
                              styles:
                                name: null
                                icon:
                                  - color: green
                                  - icon: mdi:security
                          type: custom:button-card
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: phu:pendant-round
                    name: Decke K체che
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/whitecl.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: phu:bulbs-spot
                    name: Spot
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/multic.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: mdi:lightbulb-auto
                    name: hwr
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                    custom_fields:
                      bm:
                        card:
                          entity: binary_sensor.Entit채t_Presence
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon: null
                          layout: vertical
                          name: []
                          state:
                            - value: 'on'
                              styles:
                                state:
                                  - color: green
                                card:
                                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                  - border: 0px
                                icon:
                                  - color: rgb(255,0,0)
                                  - width: 15px;
                            - value: 'off'
                              styles:
                                name: null
                                icon:
                                  - color: green
                                  - icon: mdi:security
                                  - width: 15px;
                          type: custom:button-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: phu:light-strip
                    name: Sockel neu
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                    custom_fields:
                      bm:
                        card:
                          entity: binary_sensor.Entit채t_Presence
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon: null
                          layout: vertical
                          name: []
                          state:
                            - value: 'on'
                              styles:
                                state:
                                  - color: green
                                card:
                                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                  - border: 0px
                                icon:
                                  - color: rgb(255,0,0)
                                  - width: 15px;
                            - value: 'off'
                              styles:
                                name: null
                                icon:
                                  - color: green
                                  - icon: mdi:security
                                  - width: 15px;
                          type: custom:button-card
                  - type: custom:button-card
                    entity: switch.Entit채t_Switch
                    icon: phu:bulbs-spot
                    name: Oberboden
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    template:
                      - kt_card_2
                      - popup_light_rgb
                      - light
                    custom_fields:
                      cl:
                        card:
                          type: custom:button-card
                          icon: hue:plug-eu
                          name: false
                          entity_picture: /local/whitecl.png
                          show_entity_picture: false
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 100%
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
          - type: custom:button-card
            color_type: blank-card
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: >-
                      [[[ return `Wohnzimmer -
                      ${states['sensor.wz_temp'].state}째` ]]]
                    tap_action:
                      action: navigate
                      navigation_path: /lovelace-ios/tab4
                    template:
                      - header
                    type: custom:button-card
                    hold_action:
                      action: fire-dom-event
                      browser_mod:
                        command: popup
                        title: Heizung
                        style:
                          hui-vertical-stack-card:
                            $hui-entities-card$: |
                              #states {
                                padding-top: 0.5em;
                                padding-bottom: 0em;
                              }
                        card:
                          type: vertical-stack
                          cards:
                            - type: custom:thermostat-popup-card
                              entity: climate.fritz_dect_301_2_wohnzimmer
                              brightnessWidth: 150px
                              brightnessHeight: 400px
                              switchWidth: 150px
                              switchHeight: 400px
                              fullscreen: false
                            - type: entities
                              card_mod:
                                class: content
                              entities:
                                - entity: sensor.wz_temp
                                  name: Raumtemperatur
                                - entity: sensor.humiditiy_sensor
                                  name: Luftfeuchtigkeit
                            - type: custom:apexcharts-card
                              layout: minimal
                              locale: se
                              graph_span: 8h
                              show:
                                loading: false
                              apex_config:
                                plotOptions:
                                  area:
                                    fillTo: end
                                grid:
                                  padding:
                                    top: -15
                                fill:
                                  type: gradient
                                  gradient:
                                    type: vertical
                                    opacityFrom: 0.8
                                    opacityTo: 0
                                    stops:
                                      - 0
                                      - 99
                                      - 100
                                stroke:
                                  width: 4
                                tooltip:
                                  style:
                                    fontSize: 14px
                                  x:
                                    format: dddd HH:mm
                                chart:
                                  height: 140px
                                  offsetY: '-20px'
                                xaxis:
                                  crosshairs:
                                    show: false
                              series:
                                - entity: sensor.wz_temp
                                  name: Temp
                                  color: '#385581'
                                  type: area
                                  fill_raw: last
                                  group_by:
                                    func: avg
                                    duration: 1h
                    variables:
                      circle_input: |
                        [[[
                          if (entity) {
                            return entity.state === 'cool' ?
                              entity.attributes.temperature :
                              entity.attributes.current_temperature;
                          }
                        ]]]
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: switch.Entit채t_Switch
                        icon: phu:table-shade
                        name: Tischlampe
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/whitecl.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:wall-fuzo-h
                        name: Wandlampe
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: switch.Entit채t_Switch
                        icon: phu:pendant-round
                        name: Deckenlampe
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/whitecl.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:go
                        name: Vitrine
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:lightstrip-tv
                        name: RGB Wohnwand
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:go
                        name: Vitrine
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        aspect_ratio: 1/1
                        entity: null
                        name: PS4
                        icon: fab:playstation
                        show_name: false
                        show_state: false
                        hold_action:
                          action: fire-dom-event
                          browser_mod:
                            command: popup
                            title: Playstation
                            style:
                              hui-vertical-stack-card:
                                $hui-entities-card$: |
                                  #states {
                                    padding-top: 0.5em;
                                    padding-bottom: 0em;
                                  }
                            card:
                              type: vertical-stack
                              cards:
                                - type: media-control
                                  entity: media_player.playstation_4kt
                        custom_fields:
                          media:
                            card:
                              type: media-control
                              entity: media_player.playstation_4kt
                              hold_action:
                                action: fire-dom-event
                                browser_mod:
                                  command: popup
                                  title: Playstation
                                  style:
                                    hui-vertical-stack-card:
                                      $hui-entities-card$: |
                                        #states {
                                          padding-top: 0.5em;
                                          padding-bottom: 0em;
                                        }
                                  card:
                                    type: vertical-stack
                                    cards:
                                      - type: media-control
                                        entity: media_player.playstation_4kt
                              style: >
                                ha-card {
                                  background: rgb(36, 46, 66);
                                  border-radius: 10px;
                                  padding: 12%;
                                  color: ivory;
                                  opacity: 0.7;
                                  font-size: 10px;
                                  text-shadow: 0px 0px 5px black;
                                  text-transform: capitalize;
                                  font-weight: bold;
                                  box-shadow: none;
                                  overflow: hidden;
                                  position: relative;
                                  overflow: hidden;
                                }

                                ha-state-icon {
                                  display: none;
                                }

                                ha-card > div.player.no-progress.no-controls >
                                div.top-info > div.icon-name > div {
                                  display: none;
                                } ha-card > div.player.no-progress.no-controls >
                                div:nth-child(2) > div > div > hui-marquee {
                                color: white; }

                                ha-card > div.player.no-progress.no-controls >
                                div:nth-child(2) > div > div {

                                #display: none; margin-top: 30%; top: -24px;
                                right: -24px; } ha-card >
                                div.player.no-progress.no-controls >
                                div.top-info > div:nth-child(2) > ha-icon-button
                                { top: -24px; right: -24px; }


                                [style*="--aspect-ratio"] > :first-child {
                                    position: absolute;
                                    top: 0;
                                    left: 0;
                                    height: 100%;
                                }

                                :element {
                                  --aspect-ratio: 1/1;
                                }

                                [style*="--aspect-ratio"] > icon-name {
                                    display: none;
                                }
                        styles:
                          custom_fields:
                            media:
                              - overflow: unset
                          card:
                            - overflow: unset
                            - border-radius: 10%
                            - color: ivory
                            - text-transform: capitalize
                          grid:
                            - grid-template-areas: '"n i" "temp hu" "media media"'
                            - grid-template-columns: 50% 50%
                            - grid-template-rows: 1fr 1fr 1fr
                            - overflow: unset
                          name:
                            - font-size: 16px
                            - color: white
                            - font-weight: null
                  - type: custom:button-card
                    color_type: blank-card
              - type: vertical-stack
                cards: []
          - type: vertical-stack
            cards:
              - name: B체ro
                template:
                  - header
                  - header_temp_var
                  - header_door_var
                type: custom:button-card
                triggers_update: all
                variables:
                  temp: sensor.wz_temp
                  door: binary_sensor.Entit채t_Presence
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    entity: switch.Entit채t_Switch
                    icon: hue:desk-lamp
                    color: auto
                    name: Schreibtisch
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template: kt_card_2
                    custom_fields:
                      cl:
                        card:
                          type: custom:button-card
                          icon: hue:plug-eu
                          name: false
                          entity_picture: /local/whitecl.png
                          show_entity_picture: false
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 100%
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: phu:pendant-round
                    name: Decke B체ro
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template: kt_card_2
                    custom_fields:
                      bright: |
                        [[[
                          var b = entity.attributes.brightness ? Math.round(entity.attributes.brightness/2.55) : '';
                          return parseInt(b ? b/2.55 : '0') + '%';
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/whitecl.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:beyond
                    name: Tischlampe B체ro
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                  - type: custom:button-card
                    color_type: blank-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
      - type: vertical-stack
        cards:
          - type: vertical-stack
            cards:
              - name: Flur OG
                template:
                  - header
                type: custom:button-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:double-spot
                    name: Decke Flur OG
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:single-spot
                    name: Decke Flur
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:single-spot
                    name: Decke Flur
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                  - type: custom:button-card
                    color_type: blank-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: hue:wall-appear
                    name: Wandlampe Treppe
                    template:
                      - kt_card_2
                      - light
                      - bright
                      - cl
                    custom_fields:
                      bm:
                        card:
                          entity: binary_sensor.Entit채t_Presence
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon: null
                          layout: vertical
                          name: []
                          state:
                            - value: 'on'
                              styles:
                                state:
                                  - color: green
                                card:
                                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                  - border: 0px
                                icon:
                                  - color: rgb(255,0,0)
                                  - width: 15px;
                            - value: 'off'
                              styles:
                                name: null
                                icon:
                                  - color: green
                                  - icon: mdi:security
                                  - width: 15px;
                          type: custom:button-card
                  - type: custom:button-card
                    entity: light.Entit채t_Licht
                    icon: mdi:string-lights
                    name: Lichterkette Treppe
                    show_icon: true
                    aspect_ratio: 1/1
                    hold_action:
                      action: more-info
                    tap_action:
                      action: toggle
                    show_state: true
                    template:
                      - kt_card_2
                      - popup_light_rgb
                    custom_fields:
                      bright: |
                        [[[
                          function capitalizeFirstLetter(string) {
                            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                          }
                          
                          const length = 41;
                          const width = 3;

                          if (entity.state === 'on' && entity.attributes.brightness) {
                            const radius = length / 2;
                            const brightness = Math.round(entity.attributes.brightness / 2.54);
                            const circumference = radius * 2 * Math.PI;
                            return `
                              <svg viewBox="0 0 50 50">
                                <circle style="
                                    transform: rotate(-90deg);
                                    transform-origin: 50% 50%;
                                    stroke-dasharray: ${circumference};
                                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                  "
                                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                </text>
                              </svg>
                              `;
                            }
                          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                            const text = capitalizeFirstLetter(entity.attributes.speed);
                            const gap = 5;
                            const edge = (50 - length) / 2;
                            const y = 50 - edge;
                            var items = entity.attributes.speed_list;
                            if (items.indexOf('off') !== -1){
                              items.splice(items.indexOf('off'), 1);
                            }
                            const current = items.indexOf(entity.attributes.speed)
                            var i;
                            var x1 = edge;
                            var ret = `<svg  viewBox="0 0 50 50">`;
                            var l = (length - gap * (items.length - 1)) / items.length;
                            for (i = 0; i < items.length; i++) {
                              var x2 = x1 + l;
                              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                              var opacity = (i <= current) ? "1.0" : "0.5";
                              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                              x1 = x2 + gap;
                            }
                            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                            return ret;
                          }
                        ]]]
                      cl:
                        card:
                          type: custom:button-card
                          icon: mdi:palette
                          name: false
                          entity_picture: /local/multic.png
                          show_entity_picture: true
                          show_name: false
                          styles:
                            card:
                              - background-color: '#242e42'
                              - height: 25px
                              - width: 25px
                            icon:
                              - width: 15px
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
              - type: horizontal-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
                  - type: custom:button-card
                    color_type: blank-card
          - type: vertical-stack
            cards:
              - type: custom:button-card
                color_type: blank-card
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Bad & WC OG
                    template:
                      - header
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:room-toilet
                        name: WC
                        show_icon: true
                        aspect_ratio: 1/1
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                          bm:
                            card:
                              entity: binary_sensor.Entit채t_Presence
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                  - margin-bottom: 100%
                                icon:
                                  - width: 15px
                              layout: vertical
                              name: []
                              state:
                                - value: 'on'
                                  styles:
                                    state:
                                      - color: green
                                    card:
                                      - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                      - border: 0px
                                    icon:
                                      - color: rgb(255,0,0)
                                - value: 'off'
                                  styles:
                                    name: null
                                    icon:
                                      - color: green
                                      - icon: mdi:security
                              type: custom:button-card
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:single-spot
                        name: Decke
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: phu:light-strip
                        name: Bad
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                        custom_fields:
                          bm:
                            card:
                              entity: binary_sensor.Entit채t_Presence
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon: null
                              layout: vertical
                              name: []
                              state:
                                - value: 'on'
                                  styles:
                                    state:
                                      - color: green
                                    card:
                                      - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                      - border: 0px
                                    icon:
                                      - color: rgb(255,0,0)
                                      - width: 15px;
                                - value: 'off'
                                  styles:
                                    name: null
                                    icon:
                                      - color: green
                                      - icon: mdi:security
                                      - width: 15px;
                              type: custom:button-card
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:double-spot
                        name: Decke
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards:
                  - type: vertical-stack
                    cards: []
          - type: vertical-stack
            cards: []
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Schlafzimmer
                    template:
                      - header
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: phu:pendant-round
                        name: Decke
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: phu:light-strip
                        name: RGB Stripes
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: switch.Entit채t_Switch
                        icon: phu:desk-lamp
                        name: Karsten
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        entity: switch.Entit채t_Switch
                        icon: phu:desk-lamp
                        name: Nathallie
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards:
                  - type: custom:button-card
                    color_type: blank-card
      - type: vertical-stack
        cards:
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Mika
                    template:
                      - header
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:bulb-group-spot
                        name: Spot 1
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:bulb-group-spot
                        name: Spot 2
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards: []
          - type: custom:button-card
            color_type: blank-card
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Justin
                    template:
                      - header
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:ceiling-infuse
                        name: Decke
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards: []
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Fynn
                    template:
                      - header
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:bulb-group-spot
                        name: Spot 1
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:bulb-group-spot
                        name: Spot 2
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:go
                        name: Moodlight
                        show_icon: true
                        aspect_ratio: 1/1
                        hold_action:
                          action: more-info
                        tap_action:
                          action: toggle
                        show_state: true
                        template:
                          - kt_card_2
                          - popup_light_rgb
                        custom_fields:
                          bright: |
                            [[[
                              function capitalizeFirstLetter(string) {
                                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
                              }
                              
                              const length = 41;
                              const width = 3;

                              if (entity.state === 'on' && entity.attributes.brightness) {
                                const radius = length / 2;
                                const brightness = Math.round(entity.attributes.brightness / 2.54);
                                const circumference = radius * 2 * Math.PI;
                                return `
                                  <svg viewBox="0 0 50 50">
                                    <circle style="
                                        transform: rotate(-90deg);
                                        transform-origin: 50% 50%;
                                        stroke-dasharray: ${circumference};
                                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                                      "
                                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                                    </text>
                                  </svg>
                                  `;
                                }
                              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                                const text = capitalizeFirstLetter(entity.attributes.speed);
                                const gap = 5;
                                const edge = (50 - length) / 2;
                                const y = 50 - edge;
                                var items = entity.attributes.speed_list;
                                if (items.indexOf('off') !== -1){
                                  items.splice(items.indexOf('off'), 1);
                                }
                                const current = items.indexOf(entity.attributes.speed)
                                var i;
                                var x1 = edge;
                                var ret = `<svg  viewBox="0 0 50 50">`;
                                var l = (length - gap * (items.length - 1)) / items.length;
                                for (i = 0; i < items.length; i++) {
                                  var x2 = x1 + l;
                                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                                  var opacity = (i <= current) ? "1.0" : "0.5";
                                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                                  x1 = x2 + gap;
                                }
                                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                                return ret;
                              }
                            ]]]
                          cl:
                            card:
                              type: custom:button-card
                              icon: mdi:palette
                              name: false
                              entity_picture: /local/multic.png
                              show_entity_picture: true
                              show_name: false
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon:
                                  - width: 15px
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards: []
          - type: vertical-stack
            cards:
              - type: vertical-stack
                cards:
                  - name: Lio
                    template:
                      - header
                    type: custom:button-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        entity: light.Entit채t_Licht
                        icon: hue:ceiling-infuse
                        name: Decke
                        template:
                          - kt_card_2
                          - light
                          - bright
                          - cl
                        custom_fields:
                          bm:
                            card:
                              entity: binary_sensor.Entit채t_Presence
                              styles:
                                card:
                                  - background-color: '#242e42'
                                  - height: 25px
                                  - width: 25px
                                icon: null
                              layout: vertical
                              name: []
                              state:
                                - value: 'on'
                                  styles:
                                    state:
                                      - color: green
                                    card:
                                      - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                                      - border: 0px
                                    icon:
                                      - color: rgb(255,0,0)
                                      - width: 15px;
                                - value: 'off'
                                  styles:
                                    name: null
                                    icon:
                                      - color: green
                                      - icon: mdi:security
                                      - width: 15px;
                              type: custom:button-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                  - type: horizontal-stack
                    cards:
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
                      - type: custom:button-card
                        color_type: blank-card
              - type: vertical-stack
                cards: []
