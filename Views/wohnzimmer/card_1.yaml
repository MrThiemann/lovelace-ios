type: vertical-stack
cards:
  - name: Wohnzimmer
    tap_action:
      action: navigate
      navigation_path: /lovelace-ios/lichter
    template:
      - header
    type: custom:button-card
  - type: horizontal-stack
    cards:
      - type: custom:button-card
        entity: switch.Entität_Switch
        icon: phu:table-shade
        show_icon: true
        aspect_ratio: 1/1
        hold_action:
          action: more-info
        tap_action:
          action: toggle
        name: Tischlampe
        show_state: true
        template:
          - kt_card_2
      - type: custom:button-card
        entity: light.Entität_Licht
        icon: hue:wall-fuzo-h
        show_icon: true
        aspect_ratio: 1/1
        hold_action:
          action: more-info
        tap_action:
          action: toggle
        name: Wandlampe
        show_state: true
        template:
          - kt_card_2
      - type: custom:button-card
        entity: switch.Entität_Switch
        icon: phu:pendant-round
        show_icon: true
        aspect_ratio: 1/1
        hold_action:
          action: more-info
        tap_action:
          action: toggle
        name: Deckenlampe
        show_state: true
        template:
          - kt_card_2
  - type: horizontal-stack
    cards:
      - type: custom:button-card
        entity: light.Entität_Licht
        icon: hue:go
        name: Vitrine
        show_icon: true
        aspect_ratio: 1/1
        hold_action:
          action: more-info
        tap_action:
          action: toggle
        show_state: true
        template:
          - kt_card_2
          - popup_light_rgb
        custom_fields:
          bright: |
            [[[
              function capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
              }
              
              const length = 41;
              const width = 3;

              if (entity.state === 'on' && entity.attributes.brightness) {
                const radius = length / 2;
                const brightness = Math.round(entity.attributes.brightness / 2.54);
                const circumference = radius * 2 * Math.PI;
                return `
                  <svg viewBox="0 0 50 50">
                    <circle style="
                        transform: rotate(-90deg);
                        transform-origin: 50% 50%;
                        stroke-dasharray: ${circumference};
                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                      "
                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                    </text>
                  </svg>
                  `;
                }
              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                const text = capitalizeFirstLetter(entity.attributes.speed);
                const gap = 5;
                const edge = (50 - length) / 2;
                const y = 50 - edge;
                var items = entity.attributes.speed_list;
                if (items.indexOf('off') !== -1){
                  items.splice(items.indexOf('off'), 1);
                }
                const current = items.indexOf(entity.attributes.speed)
                var i;
                var x1 = edge;
                var ret = `<svg  viewBox="0 0 50 50">`;
                var l = (length - gap * (items.length - 1)) / items.length;
                for (i = 0; i < items.length; i++) {
                  var x2 = x1 + l;
                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                  var opacity = (i <= current) ? "1.0" : "0.5";
                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                  x1 = x2 + gap;
                }
                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                return ret;
              }
            ]]]
          cl:
            card:
              type: custom:button-card
              icon: mdi:palette
              name: false
              entity_picture: /local/multic.png
              show_entity_picture: true
              show_name: false
              styles:
                card:
                  - background-color: '#242e42'
                  - height: 25px
                  - width: 25px
                icon:
                  - width: 15px
      - type: custom:button-card
        entity: light.Entität_Licht
        icon: hue:lightstrip-tv
        name: RGB Wohnwand
        show_icon: true
        aspect_ratio: 1/1
        hold_action:
          action: more-info
        tap_action:
          action: toggle
        show_state: true
        template:
          - kt_card_2
          - popup_light_rgb
        custom_fields:
          bright: |
            [[[
              function capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
              }
              
              const length = 41;
              const width = 3;

              if (entity.state === 'on' && entity.attributes.brightness) {
                const radius = length / 2;
                const brightness = Math.round(entity.attributes.brightness / 2.54);
                const circumference = radius * 2 * Math.PI;
                return `
                  <svg viewBox="0 0 50 50">
                    <circle style="
                        transform: rotate(-90deg);
                        transform-origin: 50% 50%;
                        stroke-dasharray: ${circumference};
                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                      "
                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                    </text>
                  </svg>
                  `;
                }
              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                const text = capitalizeFirstLetter(entity.attributes.speed);
                const gap = 5;
                const edge = (50 - length) / 2;
                const y = 50 - edge;
                var items = entity.attributes.speed_list;
                if (items.indexOf('off') !== -1){
                  items.splice(items.indexOf('off'), 1);
                }
                const current = items.indexOf(entity.attributes.speed)
                var i;
                var x1 = edge;
                var ret = `<svg  viewBox="0 0 50 50">`;
                var l = (length - gap * (items.length - 1)) / items.length;
                for (i = 0; i < items.length; i++) {
                  var x2 = x1 + l;
                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                  var opacity = (i <= current) ? "1.0" : "0.5";
                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                  x1 = x2 + gap;
                }
                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                return ret;
              }
            ]]]
          cl:
            card:
              type: custom:button-card
              icon: mdi:palette
              name: false
              entity_picture: /local/multic.png
              show_entity_picture: true
              show_name: false
              styles:
                card:
                  - background-color: '#242e42'
                  - height: 25px
                  - width: 25px
                icon:
                  - width: 15px
      - type: custom:button-card
        entity: light.Entität_Licht
        icon: hue:go
        name: Vitrine
        show_icon: true
        aspect_ratio: 1/1
        hold_action:
          action: more-info
        tap_action:
          action: toggle
        show_state: true
        template:
          - kt_card_2
          - popup_light_rgb
        custom_fields:
          bright: |
            [[[
              function capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
              }
              
              const length = 41;
              const width = 3;

              if (entity.state === 'on' && entity.attributes.brightness) {
                const radius = length / 2;
                const brightness = Math.round(entity.attributes.brightness / 2.54);
                const circumference = radius * 2 * Math.PI;
                return `
                  <svg viewBox="0 0 50 50">
                    <circle style="
                        transform: rotate(-90deg);
                        transform-origin: 50% 50%;
                        stroke-dasharray: ${circumference};
                        stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                      "
                      id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                    <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                    </text>
                  </svg>
                  `;
                }
              else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
                const text = capitalizeFirstLetter(entity.attributes.speed);
                const gap = 5;
                const edge = (50 - length) / 2;
                const y = 50 - edge;
                var items = entity.attributes.speed_list;
                if (items.indexOf('off') !== -1){
                  items.splice(items.indexOf('off'), 1);
                }
                const current = items.indexOf(entity.attributes.speed)
                var i;
                var x1 = edge;
                var ret = `<svg  viewBox="0 0 50 50">`;
                var l = (length - gap * (items.length - 1)) / items.length;
                for (i = 0; i < items.length; i++) {
                  var x2 = x1 + l;
                  var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
                  var opacity = (i <= current) ? "1.0" : "0.5";
                  ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
                  x1 = x2 + gap;
                }
                ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
                return ret;
              }
            ]]]
          cl:
            card:
              type: custom:button-card
              icon: mdi:palette
              name: false
              entity_picture: /local/multic.png
              show_entity_picture: true
              show_name: false
              styles:
                card:
                  - background-color: '#242e42'
                  - height: 25px
                  - width: 25px
                icon:
                  - width: 15px
  - type: horizontal-stack
    cards:
      - type: custom:button-card
        color_type: blank-card
      - type: custom:button-card
        color_type: card
        color: rgb(30, 42, 64)
        icon: mdi:volume-plus
        tap_action:
          action: call-service
          service: media_player.volume_up
          service_data:
            entity_id: media_player.living_room_speaker
      - type: custom:button-card
        color_type: card
        color: rgb(30, 42, 64)
        icon: mdi:play
        tap_action:
          action: call-service
          service: media_player.play
          service_data:
            entity_id: media_player.living_room_speaker
      - type: custom:button-card
        color_type: card
        color: rgb(30, 42, 64)
        icon: mdi:stop
        tap_action:
          action: call-service
          service: media_player.play
          service_data:
            entity_id: media_player.living_room_speaker
      - type: custom:button-card
        color_type: card
        color: rgb(30, 42, 64)
        icon: mdi:volume-minus
        tap_action:
          action: call-service
          service: media_player.volume_down
          service_data:
            entity_id: media_player.living_room_speaker
      - type: custom:button-card
        color_type: blank-card
