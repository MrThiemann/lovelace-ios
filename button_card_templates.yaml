button_card_templates:
  icon_button:
    aspect_ratio: 4/3
    color_type: icon
    hold_action:
      action: none
    layout: vertical
    show_label: false
    show_name: false
    show_state: false
    styles:
      card:
        - border-radius: 10px
        - border: solid 1px var(--primary-color)
        - box-shadow: none
        - padding: 6px 6px
        - margin: 0px 0px
        - '--paper-card-background-color': rgba(0, 0, 0, 0)
      icon:
        - width: 28px
      name:
        - justify-self: middle
        - align-self: end
        - font-size: 14px
        - padding: 0px 0px
        - color: var(--secondary-text-color)
    tap_action:
      action: call-service
  menu_button:
    aspect_ratio: 4/3
    color_type: icon
    hold_action:
      action: none
    layout: vertical
    show_label: false
    show_name: true
    show_state: false
    styles:
      card:
        - border-radius: 10px
        - border: solid 1px var(--primary-color)
        - box-shadow: none
        - padding: 6px 6px
        - margin: 0px 0px
        - '--paper-card-background-color': rgba(0, 0, 0, 0)
      icon:
        - width: 28px
      name:
        - justify-self: middle
        - align-self: end
        - font-size: 14px
        - padding: 0px 0px
        - color: var(--secondary-text-color)
    tap_action:
      action: call-service
  header:
    styles:
      card:
        - text-transform: uppercase
        - font-size: 100%
        - border-radius: 0%
        - letter-spacing: 10px
        - background-color: rgba(30,42,64,1)
        - padding: 4%
        - color: white
        - opacity: 1.7
        - text-shadow: 0px 0px 5px black
        - border: none
  button:
    styles:
      card:
        - background-color: rgba(30,42,64,1)
        - border-radius: 10%
        - padding: 12%
        - color: white
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
      grid:
        - grid-template-areas: '"i ." "n n" "s s"'
        - grid-template-columns: 1fr 1fr
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - opacity: 0.7
        - color: white
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - opacity: 0.7
        - font-size: 9px
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 100%
        - opacity: 0.2
        - color: white
      custom_fields:
        bright:
          - align-self: start
          - justify-self: end
          - border-radius: 20px
          - border-style: solid
          - border-width: 1px
          - font-size: 10px
          - font-weight: 300
          - box-shadow: 2px 2px rgba(0,0,0,0.7)
          - border-color: '#67727e'
          - padding: 15%
    state:
      - value: 'on'
        id: value_on
        styles:
          card:
            - background-color: '#242e42'
            - border-radius: 10%
            - padding: 12%
            - color: ivory
            - font-size: 10px
            - text-shadow: 0px 0px 5px black
            - text-transform: capitalize
            - box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
          grid:
            - grid-template-areas: '"i bright" "n n" "s s"'
            - grid-template-columns: 1fr 1fr
            - grid-template-rows: 1fr min-content min-content
          name:
            - font-weight: 300
            - font-size: 10px
            - color: white
            - align-self: middle
            - justify-self: start
          state:
            - font-weight: bold
            - font-size: 9px
            - color: white
            - align-self: middle
            - justify-self: start
          img_cell:
            - justify-content: start
            - align-items: start
            - margin: none
          icon:
            - width: 100%
            - color: white
          custom_fields:
            bright:
              - opacity: 0
              - align-self: start
              - justify-self: end
              - border-radius: 20px
              - border-style: solid
              - border-width: 1px
              - font-size: 10px
              - font-weight: 300
              - box-shadow: 2px 2px rgba(0,0,0,0.7)
              - border-color: '#67727e'
              - padding: 15%
  icon_ps5:
    styles:
      custom_fields:
        icon:
          - width: 88%
          - margin-left: '-1%'
          - margin-top: '-7%'
    custom_fields:
      icon: |
        [[[
          if (variables.state_on && variables.timeout < 2000) {
            return `
              <svg viewBox="0 0 50 50">
                <style>
                @keyframes on {
                  50% {
                    transform: translateY(0);
                  }
                  100% {
                    transform: translateY(-45%);
                  }
                }
                .on {
                  animation: on 2s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
                }
              </style>
              <g style="clip-path: url(#mask);">
                <g class="on">
                  <path fill="#00aa9e" d="M49.2 38.9l-75.6-25.1v7.4l75.6 25.2z"/>
                  <path fill="#f3c202" d="M49.2 46.4l-75.6-25.2v7.5l75.6 25.1z"/>
                  <path fill="#326db3" d="M49.2 53.8l-75.6-25.1V51l75.6 25.1zm0-22.3L-26.4 6.4v7.4l75.6 25.1z"/>
                </g>
              </g>
              <defs>
                <clipPath id="mask">
                  <path d="M47.5 33.2c-.5-2.2-3.9-3.5-9.1-3.9-3.8-.3-7.5.6-11.1 1.9l-.6.2v-5.7l-5.7.8-4.6 1.6L6 31.9h-.1c-1.9.7-3.8 2.2-3.7 4.2.1 2.1 4.7 2.6 8.2 3.2 3.3.6 6.2.2 8.9-.7l7.3 4.8L33 41l10.7-4h.1c2.8-1 4-2.5 3.7-3.8zm-31.3 2l-3.6 1.3c-2.2.8-4.1-1.1-2.1-1.9l1.7-.6 7.2-2.7v2.8l-3.2 1.1zm22.5-1.1l-1.9.7-10.2 3.7V36l6.5-2.4 3.8-1.3c4-.9 5.6.5 1.8 1.8z"/>
                </clipPath>
              </defs>
              <path fill="#de0029" d="M26.7 14.6v28.7l-7.3-2.5V7.1l9.3 2.6c6 1.7 9.6 5 9.6 10.7-.1 6.7-3 9.4-8.7 7.6V14.9c-.1-1.6-2.9-1.7-2.9-.3h0z"/>
            </svg>
          `;
          }
          return variables.state_on && variables.timeout > 2000 ? `
            <svg viewBox="0 0 50 50">
            <g style="clip-path: url(#mask);">
              <g style="transform: translateY(-45%);">
                <path fill="#00aa9e" d="M49.2 38.9l-75.6-25.1v7.4l75.6 25.2z"/>
                <path fill="#f3c202" d="M49.2 46.4l-75.6-25.2v7.5l75.6 25.1z"/>
                <path fill="#326db3" d="M49.2 53.8l-75.6-25.1V51l75.6 25.1zm0-22.3L-26.4 6.4v7.4l75.6 25.1z"/>
              </g>
            </g>
            <defs>
              <clipPath id="mask">
                <path d="M47.5 33.2c-.5-2.2-3.9-3.5-9.1-3.9-3.8-.3-7.5.6-11.1 1.9l-.6.2v-5.7l-5.7.8-4.6 1.6L6 31.9h-.1c-1.9.7-3.8 2.2-3.7 4.2.1 2.1 4.7 2.6 8.2 3.2 3.3.6 6.2.2 8.9-.7l7.3 4.8L33 41l10.7-4h.1c2.8-1 4-2.5 3.7-3.8zm-31.3 2l-3.6 1.3c-2.2.8-4.1-1.1-2.1-1.9l1.7-.6 7.2-2.7v2.8l-3.2 1.1zm22.5-1.1l-1.9.7-10.2 3.7V36l6.5-2.4 3.8-1.3c4-.9 5.6.5 1.8 1.8z"/>
              </clipPath>
            </defs>
            <path fill="#de0029" d="M26.7 14.6v28.7l-7.3-2.5V7.1l9.3 2.6c6 1.7 9.6 5 9.6 10.7-.1 6.7-3 9.4-8.7 7.6V14.9c-.1-1.6-2.9-1.7-2.9-.3h0z"/>
          </svg>
          ` : `
            <svg viewBox="0 0 50 50">
              <path fill="#9da0a2" d="M43.8 37h-.1l-10.6 4-4.2 1.6v-4.9l8-2.9 1.9-.7c3.8-1.3 2.2-2.7-1.8-1.9l-3.8 1.3-4.3 1.6v-4.5c3.1-1 6.3-1.6 9.5-1.4 5.3.4 8.7 1.6 9.1 3.9.3 1.4-.9 2.9-3.7 3.9zm-26.7-2.1l-.9.3-3.6 1.3c-2.2.8-4.1-1.1-2.1-1.9l1.7-.6 5-1.9v-4.2l-.6.2L6 31.9h-.1c-1.9.7-3.8 2.2-3.7 4.2.1 2.1 4.7 2.6 8.2 3.2 2.4.4 4.6.3 6.7-.1v-4.3zm12.4-20V28c5.7 1.7 8.7-.9 8.7-7.6.1-5.7-3.6-9-9.6-10.7l-9.3-2.6v33.8l7.2 2.5.1.1V14.6c.1-1.4 2.9-1.3 2.9.3z"/>
            </svg>
          `;
        ]]]
  inkwell:
    show_name: false
    show_state: true
    extra_styles: |
      [[[ return `
        @keyframes pulse {
          5% {
            background-color: ${variables.color};
          }
        }
      `]]]
    styles:
      icon:
        - opacity: 0.7
        - color: '[[[ return variables.color ]]]'
        - filter: drop-shadow( 0 0 2px rgba(0, 0, 0, .7))
      state:
        - font-size: 1.5em
        - font-weight: bold
        - text-shadow: 0 0 6px black
        - overflow: visible
      card:
        - border: solid 3px gray
        - border-top: none
        - background: |
            [[[
              var level = entity.state;
              var color = variables.color;
              return `linear-gradient(to top, ${color}, ${color} ${level}%, rgba(255,255,255,0.12) ${level}%)`
            ]]]
        - animation: |
            [[[
              return (0 + entity.state) < 10
                ? 'pulse ease-in-out 1s infinite'
                : 'none'
            ]]]
  climate:
    template:
      - circle
    custom_fields:
      circle: |
        [[[
          if (entity && entity.attributes.temperature && entity.attributes.current_temperature) {
            let input = variables.circle_input == null ? ' ' : `${parseInt(variables.circle_input)}<tspan font-size="10">Â°C</tspan>`,
              stroke_color = variables.state === 'cool' || variables.state === 'fan_only' ? '#b2b2b2' : 'none',
              fill_color = variables.state === 'off' ? 'rgba(255,255,255,0.04)' : 'none';
            return `
              <svg viewBox="0 0 50 50">
                <circle cx="25" cy="25" r="20.5" stroke="${stroke_color}" stroke-width="1.5" fill="${fill_color}" />
                <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}</text>
              </svg>
            `;
          }
        ]]]
  kt_card_1:
    styles:
      card:
        - background-color: '#242e42'
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - opacity: 1.7
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
        - box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
      grid:
        - grid-template-areas: '"i bright ." "i bm ." "n cl ." "s cl ."'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - opacity: 0.7
        - color: white
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - opacity: 0.7
        - font-size: 9px
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - opacity: 0.2
        - color: white
      custom_fields:
        bright:
          - align-self: start
          - align-self: start
          - border-radius: 20px
          - font-size: 10px
          - font-weight: 300
          - width: 25px
          - display: |
              [[[
                return entity.state == 'off' ? 'none' : 'block'
              ]]]
        cl:
          - align-self: start
          - justify-self: end
          - justify-self: end
          - display: |
              [[[
                return entity.state == 'off' ? 'none' : 'block'
              ]]]
    state:
      - value: 'on'
        id: value_on
        styles:
          card:
            - opacity: 1
            - box-shadow: 0px 0px 10px 1px var(--button-card-light-color)
          name:
            - opacity: 1
          state:
            - opacity: 1
          img_cell: null
          icon:
            - opacity: 1
            - align-self: start
            - color: |
                [[[
                  var [domain, object_id] = entity.entity_id.split('.');
                  if (domain === "light")
                    return 'var(--button-card-light-color)';
                  return '{{ color }}';
                ]]]
          custom_fields:
            bright:
              - align-self: start
              - align-self: start
              - border-radius: 20px
              - font-size: 10px
              - font-weight: 300
              - width: 25px
            cl:
              - align-self: start
              - justify-self: end
            bm: null
      - value: 'off'
        id: value_off
        styles:
          card:
            - box-shadow: none
          name: null
          state: null
          img_cell: null
          icon: null
          custom_fields:
            bright:
              - align-self: start
              - align-self: start
              - border-radius: 20px
              - font-size: 10px
              - font-weight: 300
              - width: 25px
            cl:
              - align-self: start
              - justify-self: end
            card:
              - background-color: '#242e42'
              - height: 25px
              - width: 25px
              - margin: 0px -5px
            icon:
              - width: 15px
  kt_card_2:
    styles:
      card:
        - background-color: rgba(30,42,64,1)
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
        - box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
      grid:
        - grid-template-areas: '"i bright ." "i bm ." "n cl ." "s cl ."'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - opacity: 1
        - color: white
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - opacity: 1
        - font-size: 9px
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - opacity: 1.2
        - color: '#4d576d'
      custom_fields:
        bright:
          - align-self: start
          - align-self: start
          - border-radius: 20px
          - font-size: 10px
          - font-weight: 300
          - width: 25px
          - display: |
              [[[
                return entity.state == 'off' ? 'none' : 'block'
              ]]]
        cl:
          - align-self: start
          - justify-self: end
          - justify-self: end
          - display: |
              [[[
                return entity.state == 'off' ? 'none' : 'block'
              ]]]
    state:
      - value: 'on'
        id: value_on
        styles:
          card:
            - box-shadow: 0px 0px 10px 1px var(--button-card-light-color)
          name:
            - opacity: 1
          state:
            - opacity: 1
          img_cell: null
          icon:
            - opacity: 1
            - align-self: start
            - color: |
                [[[
                  var [domain, object_id] = entity.entity_id.split('.');
                  if (domain === "light")
                    return 'var(--button-card-light-color)';
                  return '{{ color }}';
                ]]]
          custom_fields:
            bright:
              - align-self: start
              - align-self: start
              - border-radius: 20px
              - font-size: 10px
              - font-weight: 300
              - width: 25px
            cl:
              - align-self: start
              - justify-self: end
            bm: null
      - value: 'off'
        id: value_off
        styles:
          card:
            - box-shadow: none
          name: null
          state: null
          img_cell: null
          icon: null
          custom_fields:
            bright:
              - align-self: start
              - align-self: start
              - border-radius: 20px
              - font-size: 10px
              - font-weight: 300
              - width: 25px
            cl:
              - align-self: start
              - justify-self: end
            card:
              - background-color: '#242e42'
              - height: 25px
              - width: 25px
              - margin: 0px -5px
            icon:
              - width: 15px
  kt_card_3:
    styles:
      card:
        - background-color: '#4d576d'
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - opacity: 1
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
        - box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
      grid:
        - grid-template-areas: '"i bright ." "i bm ." "n cl ." "s cl ."'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - opacity: 1
        - color: white
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - opacity: 1
        - font-size: 9px
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - opacity: 1.2
        - color: '#4d576d'
      custom_fields:
        bright:
          - align-self: start
          - align-self: start
          - border-radius: 20px
          - font-size: 10px
          - font-weight: 300
          - width: 25px
          - display: |
              [[[
                return entity.state == 'off' ? 'none' : 'block'
              ]]]
        cl:
          - align-self: start
          - justify-self: end
          - justify-self: end
          - display: |
              [[[
                return entity.state == 'off' ? 'none' : 'block'
              ]]]
    state:
      - value: 'on'
        id: value_on
        styles:
          card:
            - opacity: 1
            - box-shadow: 0px 0px 10px 1px var(--button-card-light-color)
          name:
            - opacity: 1
          state:
            - opacity: 1
          img_cell: null
          icon:
            - opacity: 1
            - align-self: start
            - color: |
                [[[
                  var [domain, object_id] = entity.entity_id.split('.');
                  if (domain === "light")
                    return 'var(--button-card-light-color)';
                  return '{{ color }}';
                ]]]
          custom_fields:
            bright:
              - align-self: start
              - align-self: start
              - border-radius: 20px
              - font-size: 10px
              - font-weight: 300
              - width: 25px
            cl:
              - align-self: start
              - justify-self: end
            bm: null
      - value: 'off'
        id: value_off
        styles:
          card:
            - box-shadow: none
          name: null
          state: null
          img_cell: null
          icon: null
          custom_fields:
            bright:
              - align-self: start
              - align-self: start
              - border-radius: 20px
              - font-size: 10px
              - font-weight: 300
              - width: 25px
            cl:
              - align-self: start
              - justify-self: end
            card:
              - background-color: '#242e42'
              - height: 25px
              - width: 25px
              - margin: 0px -5px
            icon:
              - width: 15px
  light:
    template:
      - base
      - loader
    variables:
      circle_input: >
        [[[ return entity === undefined ||
        Math.round(entity.attributes.brightness / 2.54); ]]]
    hold_action:
      action: fire-dom-event
      browser_mod:
        command: popup
        title: >
          [[[ return entity === undefined || entity.attributes.friendly_name;
          ]]]     
        hide_header: true
        style:
          $: ''
          .: |
            :host {
              --mdc-theme-surface: rgba(0,0,0,0);
              --secondary-background-color: rgba(0,0,0,0);
              --ha-card-background: rgba(0,0,0,0);
              --mdc-dialog-scrim-color: rgba(0,0,0,0.8);

            }
        card:
          type: custom:light-popup-card
          entity: |
            [[[ return variables.entity_id; ]]]
          icon: none
          fullscreen: false
          brightnessWidth: 130px
          brightnessHeight: 360px
          borderRadius: 1.7em
          sliderColor: '#c7c7c7'
          sliderTrackColor: rgba(25, 25, 25, 0.9)
          displayType: slider
          actionSize: 4.5em
          actionsInARow: 2
          actions:
            - action: call-service
              service: light.turn_on
              color: '#d8d9e1'
              service_data:
                entity_id: |
                  [[[ return variables.entity_id; ]]]
                color_temp: 153
            - action: call-service
              service: light.turn_on
              color: '#d5b08d'
              service_data:
                entity_id: |
                  [[[ return variables.entity_id; ]]]
                color_temp: 326
            - action: call-service
              service: light.turn_on
              color: '#ce944b'
              service_data:
                entity_id: |
                  [[[ return variables.entity_id; ]]]
                color_temp: 500
            - action: fire-dom-event
              image: >-
                data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0  50
                50"%3E%3Cstyle%3Esvg%7Bbackground:radial-gradient(circle,rgba(255,255,
                255,1) 0%25,rgba(255,255,255,0)
                80%25),conic-gradient(%237827e6,%23e622e7,
                %23e40588,%23e41919,%23e5691e,%23e8e22e,%237de629,%2334e828,%2333e75c,
                %2334e8e0,%23207de5,%231227e5,%237827e6)%7D%3C/style%3E%3C/svg%3E
              browser_mod:
                command: popup
                title: >
                  [[[ return entity === undefined ||
                  entity.attributes.friendly_name; ]]]
                hide_header: true
                style:
                  $: ''
                  .: |
                    :host {
                      --mdc-theme-surface: rgba(0,0,0,0);
                      --secondary-background-color: rgba(0,0,0,0);
                      --ha-card-background: rgba(0,0,0,0);
                      --mdc-dialog-scrim-color: rgba(0,0,0,0.8);

                    }
                card:
                  type: custom:light-entity-card
                  entity: |
                    [[[ return variables.entity_id; ]]]
                  brightness: true
                  color_temp: true
                  white_value: true
                  full_width_sliders: false
                  hide_header: true
                  show_slider_percent: true
                  smooth_color_wheel: true
                  persist_features: true
                  consolidate_entities: true
  bm:
    custom_fields:
      bm:
        card:
          entity: binary_sensor.EntitÃ¤t_Presence
          styles:
            card:
              - background-color: '#242e42'
              - height: 25px
              - width: 25px
            icon: null
          layout: vertical
          name: []
          state:
            - value: 'on'
              styles:
                state:
                  - color: green
                card:
                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                  - border: 0px
                icon:
                  - color: rgb(255,0,0)
                  - width: 15px;
            - value: 'off'
              styles:
                name: null
                icon:
                  - color: green
                  - icon: mdi:security
                  - width: 15px;
          type: custom:button-card
  bright:
    custom_fields:
      bright: |
        [[[
          function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
          }
          
          const length = 41;
          const width = 3;

          if (entity.state === 'on' && entity.attributes.brightness) {
            const radius = length / 2;
            const brightness = Math.round(entity.attributes.brightness / 2.54);
            const circumference = radius * 2 * Math.PI;
            return `
              <svg viewBox="0 0 50 50">
                <circle style="
                    transform: rotate(-90deg);
                    transform-origin: 50% 50%;
                    stroke-dasharray: ${circumference};
                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                  "
                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                </text>
              </svg>
              `;
            }
          else if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
            const text = capitalizeFirstLetter(entity.attributes.speed);
            const gap = 5;
            const edge = (50 - length) / 2;
            const y = 50 - edge;
            var items = entity.attributes.speed_list;
            if (items.indexOf('off') !== -1){
              items.splice(items.indexOf('off'), 1);
            }
            const current = items.indexOf(entity.attributes.speed)
            var i;
            var x1 = edge;
            var ret = `<svg  viewBox="0 0 50 50">`;
            var l = (length - gap * (items.length - 1)) / items.length;
            for (i = 0; i < items.length; i++) {
              var x2 = x1 + l;
              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
              var opacity = (i <= current) ? "1.0" : "0.5";
              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
              x1 = x2 + gap;
            }
            ret += `<text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
            return ret;
          }
        ]]]
  cl:
    custom_fields:
      cl:
        card:
          type: custom:button-card
          icon: mdi:palette
          name: false
          entity_picture: /local/multic.png
          show_entity_picture: true
          show_name: false
          styles:
            card:
              - background-color: '#242e42'
              - height: 25px
              - width: 25px
            icon:
              - width: 15px
  loader:
    custom_fields:
      loader: |
        <img src="/local/loader.svg" width="100%">
    tap_action:
      loader: |
        [[[
          if (entity) {
            let elt = this.shadowRoot,
              loader = (id, style, timeout) => {
                elt.getElementById(id) && (elt.getElementById(id).style.display = style,
                  window.setTimeout(() => {
                    elt.getElementById(id).style.display = timeout
                  }, 20000))
              };
            loader('circle', 'none', 'initial'),
            loader('loader', 'initial', 'none');
          }
        ]]]
    styles:
      custom_fields:
        loader:
          - display: none
          - top: 3%
          - left: 60%
          - width: 37%
          - position: absolute
          - opacity: 0.5
          - filter: |
              [[[ return variables.state === 'off' ? 'invert(1)' : 'none'; ]]]
  circle:
    custom_fields:
      circle: |
        [[[
          if (variables.state_on) {
            let input = variables.circle_input,
              radius = 20.5,
              circumference = radius * 2 * Math.PI;
            return `
              <svg viewBox="0 0 50 50">
                <style>
                  circle {
                    transform: rotate(-90deg);
                    transform-origin: 50% 50%;
                    stroke-dasharray: ${circumference};
                    stroke-dashoffset: ${circumference - input / 100 * circumference};
                  }
                  tspan {
                    font-size: 10px;
                  }
                </style>
                <circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" />
                <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}<tspan font-size="10">%</tspan></text>
              </svg>
            `;
          }
        ]]]
    styles:
      custom_fields:
        circle:
          - display: initial
          - width: 90%
          - letter-spacing: 0.03vw
          - margin: '-6% -5% 0 0'
          - justify-self: end
          - opacity: 1
  base:
    variables:
      state_on: >
        [[[ return ['on', 'home', 'cool', 'fan_only', 'playing'].indexOf(entity
        === undefined || entity.state) !== -1; ]]]
      state: |
        [[[ return entity === undefined || entity.state; ]]]
      entity_id: |
        [[[ return entity === undefined || entity.entity_id; ]]]
      media_on: >
        [[[ return entity === undefined || ['playing',
        'paused'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return entity === undefined || ['off', 'idle', 'standby', 'unknown',
        'unavailable'].indexOf(entity.state) !== -1; ]]]
      entity_picture: |
        [[[ return entity === undefined || entity.attributes.entity_picture; ]]]
      timeout: >
        [[[ return entity === undefined || Date.now() -
        Date.parse(entity.last_changed); ]]]
    aspect_ratio: 1/1
    show_state: true
    show_icon: true
    state_display: |
      [[[ if (variables.state === true) return variables.translate_unknown; ]]]
    tap_action:
      ui_sound_tablet: |
        [[[
          let screensaver = states[variables.entity_tablet] === undefined || 
            states[variables.entity_tablet].state;
          if (variables.state === 'off' && screensaver === 'off') {
            hass.callService('media_player', 'play_media', {
              entity_id: variables.entity_browser_mod,
              media_content_id: '/local/sound/on.m4a',
              media_content_type: 'music'
            });
          }
          if (variables.state_on && screensaver === 'off') {
            hass.callService('media_player', 'play_media', {
              entity_id: variables.entity_browser_mod,
              media_content_id: '/local/sound/off.m4a',
              media_content_type: 'music'
            });
          }
        ]]]
      animation_card: |
        [[[
          let time = 900;
          this.shadowRoot.getElementById('card').style.animation =
            `card_bounce ${time}ms cubic-bezier(0.22, 1, 0.36, 1)`,
            window.setTimeout(() => {
              this.shadowRoot.getElementById('card').style.animation = 'none'
            }, time);
        ]]]
      action: toggle
      haptic: medium
    hold_action:
      haptic: success
    extra_styles: |
      [[[
        if (entity) {
          let hs = entity.attributes.hs_color === undefined,
            h = hs || entity.attributes.hs_color[0],
            s = hs || entity.attributes.hs_color[1],
            l_min = 28,
            l_max = 48,
            l_calc = entity.attributes.brightness / 2.54 * (l_max - l_min) / 100 + l_min;
          var light_color = entity.attributes.color_mode === 'color_temp' || entity.attributes.color_mode === 'brightness'
            ? `hsl(204, 58%, ${l_calc}%);`
            : `hsl(${h}, ${s}%, ${l_calc}%);`;
        }
        return `
          svg {
            --light-color:
            ${ variables.state_on && entity.attributes.brightness !== undefined
                ? light_color
                : variables.state_on && entity.attributes.brightness === undefined
                  ? 'var(--state-icon-active-color);'
                  : 'var(--state-icon-color);'
            }
          }
          #container {
            text-align: left !important;
          }
          #name, #state {
            font-size: 1.34vw;
            letter-spacing: 0.05vw;
          }
          #state::first-letter {
            text-transform: uppercase;
          }
          #blur, #overlayx {
            top: calc((100% - var(--media-blur-height)) + 0.5%);
            height: var(--media-blur-height);
          }
          /* portrait */
          @media screen and (max-width: 1200px) {
            #name, #state {
              font-size: 2vw;
              letter-spacing: 0.05vw;
            }
            #blur, #overlayx {
              top: calc((100% - (var(--media-blur-height) + 1.5%)) + 0.5%);
              height: calc(var(--media-blur-height) + 1.5%);
            }
          }
          /* phone */
          @media screen and (max-width: 800px) {
            #name, #state {
              font-size: 3.1vw;
              letter-spacing: 0.12vw;
            }
            #blur, #overlayx {
              top: calc((100% - (var(--media-blur-height) + 3%)) + 0.5%);
              height: calc(var(--media-blur-height) + 3%);
            }
          }
          @keyframes card_bounce {
            0% {
              transform: scale(1);
            }
            15% {
              transform: scale(0.9);
            }
            25% {
              transform: scale(1);
            }
            30% {
              transform: scale(0.98);
            }
            100% {
              transform: scale(1);
            }
          }
          .marquee {
            animation: marquee 20s linear infinite;
          }
          @keyframes marquee {
            from {
              transform: translateX(0%);
            }
            to {
              transform: translateX(-50%);
            }
          }
        `
      ]]]
  motion_door_and_window_sensors_header:
    show_name: false
    show_label: true
    show_icon: false
    layout: icon_label
    label_template: >
      var i; var entities = entity.attributes.entity_id; var count = 0; var
      entity_type = entity.attributes.friendly_name.split(' ')[1]; for (i = 0; i
      < entities.length; i++) {
        var state = states[entities[i]].state;
        if (state === 'on') {
          count += 1;
        }
      } if (entity_type === 'PIR') {
        var label_prefix = '-- Motion';
        var label_sufix = ' Detected --';
      } else if (entity_type === 'Door') {
        var label_prefix = '-- Doors';
        var label_sufix = ' are Open --';
      } else {
        var label_prefix = '-- Windows';
        var label_sufix = ' are Open --';
      } return label_prefix + (count.toString() > 0 ? label_sufix : ' --');
    styles:
      card:
        - background-color: var(--paper-card-background-color)
      label:
        - justify-self: start
        - padding-left: 24px
        - font-size: 24px
        - color: var(--primary-text-color)
      grid:
        - grid-template-areas: '"l"'
        - grid-template-columns: 1fr
  motion_sensors:
    template: generic_motion_door_and_window_sensors
  door_sensors:
    template: generic_motion_door_and_window_sensors
    dbltap_action:
      action: more-info
    state:
      - id: sensor_on
        icon: mdi:door-open
      - value: 'off'
        icon: mdi:door-closed
  window_sensors:
    template: generic_motion_door_and_window_sensors
    dbltap_action:
      action: more-info
    state:
      - id: sensor_on
        icon: mdi:window-open
      - value: 'off'
        icon: mdi:window-closed
  generic_motion_door_and_window_sensors:
    name_template: >
      var sensor_name = entity.attributes.friendly_name; if
      (sensor_name.search('PIR') === 0) {
        return sensor_name.split('PIR ')[1];
      } else if (sensor_name.split(' ')[sensor_name.split(' ').length - 1] ===
      'Door') {
        var sensor_name = sensor_name.replace(' Door', '');
        return sensor_name;
      } else {
        var sensor_name = sensor_name.replace(' Window', '');
        var sensor_name = sensor_name.replace('Left', '(L)');
        var sensor_name = sensor_name.replace('Centre', '(C)');
        var sensor_name = sensor_name.replace('Right', '(R)');
        return sensor_name;
      }
    show_label: true
    label_template: >
      var sensor_name = entity.attributes.friendly_name; if
      (sensor_name.search('PIR') === 0) {
        return entity.state === 'on' ? '-MOTION-' : '';
      } else {
        return entity.state === 'on' ? '-OPEN-' : '';
      }
    layout: icon_label
    aspect_ratio: 2.5/1
    size: 50%
    state:
      - value: 'on'
        id: sensor_on
        styles:
          card:
            - box-shadow: 0px 0px 8px 2px var(--secondary-text-color)
          icon:
            - color: var(--secondary-text-color)
    styles:
      name:
        - font-size: 12px
      label:
        - font-size: 12px
        - font-weight: bold
        - color: var(--secondary-text-color)
        - justify-self: start
    tap_action:
      action: none
    hold_action:
      action: none
    dbltap_action:
      action: more-info
  popup_light_rgb:
    hold_action:
      action: fire-dom-event
      browser_mod:
        command: popup
        title: '[[[ return entity.attributes.friendly_name ]]]'
        hide_header: true
        auto_close: false
        style:
          $: |
            .mdc-dialog .mdc-dialog__container {
              width: 100%;
            }
            .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
              width:100%;
              box-shadow:none;
            }
          .: |
            :host {
              --mdc-theme-surface: rgba(0,0,0,0);
              --secondary-background-color: rgba(0,0,0,0);
              --ha-card-background: rgba(0,0,0,0);
              --mdc-dialog-scrim-color: rgba(0,0,0,0.8);
              --mdc-dialog-min-height: 100%;
              --mdc-dialog-min-width: 100%;
              --mdc-dialog-max-width: 100%;
            }
            mwc-icon-button {
              color: #FFF;
            }        
        card:
          type: custom:light-popup-card
          entity: '[[[ return entity.entity_id ]]]'
          icon: mdi:led-strip
          actionSize: 60px
          settings:
            openButton: RGB
            closeButton: CLOSE
          settingsCard:
            type: custom:light-entity-card
            cardOptions:
              entity: '[[[ return entity.entity_id ]]]'
              brightness: true
              full_width_sliders: true
              hide_header: true
              show_slider_percent: true
              smooth_color_wheel: true
              consolidate_entities: true
              effects_list:
                - 1
                - 2
                - 3
                - 4
          style: |
            .ha-slider-full-width ha-slider {
              border-radius: 4px;
              margin-left: 10px;
              margin-right: 10px;
            }
          actions:
            - service: light.turn_on
              service_data:
                entity_id: '[[[ return entity.entity_id ]]]'
                color_temp: 153
              color: '#d8d9e1'
            - service: light.turn_on
              service_data:
                entity_id: '[[[ return entity.entity_id ]]]'
                color_temp: 326
              color: '#d5b08d'
            - service: light.turn_on
              service_data:
                entity_id: '[[[ return entity.entity_id ]]]'
                color_temp: 500
              color: '#ce944b'
            - action: fire-dom-event
              image: >-
                data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0  50
                50"%3E%3Cstyle%3Esvg%7Bbackground:radial-gradient(circle,rgba(255,255,
                255,1) 0%25,rgba(255,255,255,0)
                80%25),conic-gradient(%237827e6,%23e622e7,
                %23e40588,%23e41919,%23e5691e,%23e8e22e,%237de629,%2334e828,%2333e75c,
                %2334e8e0,%23207de5,%231227e5,%237827e6)%7D%3C/style%3E%3C/svg%3E
              browser_mod:
                command: popup
                title: '[[[ return entity.attributes.friendly_name ]]]'
                card:
                  type: custom:light-entity-card
                  entity: '[[[ return entity.entity_id ]]]'
                  brightness: true
                  color_temp: true
                  white_value: true
                  full_width_sliders: false
                  hide_header: true
                  show_slider_percent: true
                  smooth_color_wheel: true
                  persist_features: true
                  consolidate_entities: true
                  effects_List: true
                style:
                  $: |
                    .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
                      border-radius: 25px;
                      padding: 65px;
                    }
                  .: |
                    :host {
                      --mdc-theme-surface: rgba(0,0,0,0);
                      --secondary-background-color: rgba(0,0,0,0.5);
                      --ha-card-background: rgba(0,0,0,0.5);
                    }
                    :host .content {
                      width: 35vw;
                      height: 100vh;
                     }
  popup_climate:
    hold_action:
      action: fire-dom-event
      browser_mod:
        command: popup
        title: '[[[ return entity.attributes.friendly_name ]]]'
        hide_header: true
        auto_close: false
        style:
          $: |
            .mdc-dialog .mdc-dialog__container {
              width: 100%;
            }
            .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
              width:100%;
              box-shadow:none;
            }
          .: |
            :host {
              --mdc-theme-surface: rgba(0,0,0,0);
              --secondary-background-color: rgba(0,0,0,0);
              --ha-card-background: rgba(0,0,0,0);
              --mdc-dialog-scrim-color: rgba(0,0,0,0.8);
              --mdc-dialog-min-height: 100%;
              --mdc-dialog-min-width: 100%;
              --mdc-dialog-max-width: 100%;
            }
            mwc-icon-button {
              color: #FFF;
            }        
        card:
          type: custom:thermostat-popup-card
          entity: '[[[ return entity.entity_id ]]]'
          actionSize: 60px
          brightnessWidth: 150px
          brightnessHeight: 400px
          switchWidth: 150px
          switchHeight: 400px
          fullscreen: false
          style: |
            .ha-slider-full-width ha-slider {
              border-radius: 4px;
              margin-left: 10px;
              margin-right: 10px;
            }
  kt_button_template_off:
    styles:
      card:
        - background-color: '#242e42'
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - opacity: 0.7
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
      grid:
        - grid-template-areas: '"i bright" "n cl" "s cl"'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - color: white
        - opacity: 0.7
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - font-size: px
        - opacity: 0.7
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - opacity: 0.2
        - color: white
      custom_fields:
        bright:
          - align-self: start
          - justify-self: end
          - border-radius: 20px
          - border-style: solid
          - border-width: 1px
          - font-size: 10px
          - font-weight: 300
          - box-shadow: 2px 2px rgba(0,0,0,0.7)
          - border-color: '#67727e'
          - padding: 15%
        cl:
          - align-self: start
          - justify-self: end
    value: 'off'
  kt_button_template_on:
    styles:
      card:
        - background-color: '#242e42'
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
        - box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
      grid:
        - grid-template-areas: '"i bright" "n cl" "s cl"'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - color: white
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - font-size: px
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - color: white
      custom_fields:
        bright:
          - align-self: start
          - justify-self: end
          - border-radius: 20px
          - border-style: solid
          - border-width: 1px
          - font-size: 10px
          - font-weight: 300
          - box-shadow: 2px 2px rgba(0,0,0,0.7)
          - border-color: '#67727e'
          - padding: 15%
        cl:
          - align-self: start
          - justify-self: end
    value: 'on'
  kt_button_template_unavailable:
    styles:
      card:
        - background-color: '#242e42'
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - opacity: 0.7
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
        - box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
      grid:
        - grid-template-areas: '"i bright" "n cl" "s cl"'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - opacity: 0.7
        - color: white
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - opacity: 0.7
        - font-size: 9px
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - opacity: 0.2
        - color: white
      custom_fields:
        bright:
          - align-self: start
          - justify-self: end
          - border-radius: 20px
          - border-style: solid
          - border-width: 1px
          - font-size: 10px
          - font-weight: 300
          - box-shadow: 2px 2px rgba(0,0,0,0.7)
          - border-color: '#67727e'
          - padding: 15%
        cl:
          - align-self: start
          - justify-self: end
    value: unavailable
  kt_button_template:
    styles:
      card:
        - background-color: '#242e42'
        - border-radius: 10%
        - padding: 12%
        - color: ivory
        - opacity: 0.7
        - font-size: 10px
        - text-shadow: 0px 0px 5px black
        - text-transform: capitalize
      grid:
        - grid-template-areas: '"i bright" "n cl" "s cl"'
        - grid-template-columns: 1fr min-content
        - grid-template-rows: 1fr min-content min-content
      name:
        - font-weight: 300
        - font-size: 10px
        - color: white
        - opacity: 0.7
        - align-self: middle
        - justify-self: start
      state:
        - font-weight: bold
        - font-size: px
        - opacity: 0.7
        - color: white
        - align-self: middle
        - justify-self: start
      img_cell:
        - justify-content: start
        - align-items: start
        - margin: none
      icon:
        - width: 60%
        - opacity: 0.2
        - color: white
      custom_fields:
        bright:
          - align-self: start
          - justify-self: end
          - border-radius: 20px
          - border-style: solid
          - border-width: 1px
          - font-size: 10px
          - font-weight: 300
          - box-shadow: 2px 2px rgba(0,0,0,0.7)
          - border-color: '#67727e'
          - padding: 15%
        cl:
          - align-self: start
          - justify-self: end
    state:
      - value: 'off'
      - value: 'on'
        card:
          box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px
        name:
          opacity: 1
        state:
          opacity: 1
        icon:
          opacity: 1
  header_grid:
    styles:
      grid:
        - grid-template-areas: '"temp n cl"'
        - grid-template-columns: max-content 1.5fr min-content
        - grid-template-rows: 1fr min-content min-content
      icon: null
  header_temp_wz:
    custom_fields:
      temp:
        card:
          styles:
            card:
              - background-color: transparent
              - width: 50px
              - box-shadow: none
          layout: vertical
          name: '[[[ return ` ${states[''sensor.wz_temp''].state}Â°` ]]]'
          type: custom:button-card
  header_temp_ku:
    custom_fields:
      temp:
        card:
          styles:
            card:
              - background-color: transparent
              - width: 50px
              - box-shadow: none
          layout: vertical
          name: '[[[ return ` ${states[''sensor.ku_temp''].state}Â°` ]]]'
          type: custom:button-card
  button_bm_var:
    custom_fields:
      bm:
        card:
          entity: |
            [[[ return variables.bm ]]]
          styles:
            card:
              - background-color: '#242e42'
              - height: 25px
              - width: 25px
            icon: null
          layout: vertical
          name: []
          state:
            - value: 'on'
              styles:
                state:
                  - color: green
                card:
                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                  - border: 0px
                icon:
                  - color: rgb(255,0,0)
                  - width: 15px;
            - value: 'off'
              styles:
                name: null
                icon:
                  - color: green
                  - icon: mdi:security
                  - width: 15px;
          type: custom:button-card
  header_temp_var:
    styles:
      grid:
        - grid-template-areas: '"temp n door"'
        - grid-template-columns: max-content 1.5fr min-content
        - grid-template-rows: 1fr min-content min-content
    custom_fields:
      temp:
        card:
          styles:
            card:
              - background-color: transparent
              - width: 50px
              - box-shadow: none
          layout: vertical
          name: |
            [[[ return states[variables.temp].state + 'Â°' ]]]
          type: custom:button-card
  header_door_var:
    styles:
      grid:
        - grid-template-areas: '"temp n door"'
        - grid-template-columns: max-content 1.5fr min-content
        - grid-template-rows: 1fr min-content min-content
    custom_fields:
      door:
        card:
          entity: |
            [[[ return variables.door ]]]
          styles:
            card:
              - background-color: '#242e42'
              - width: 25px
              - box-shadow: none
            icon:
              - width: 20px
          layout: vertical
          name: []
          state:
            - value: 'on'
              icon: phu:double-window-open
              styles:
                state: null
                card:
                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                icon:
                  - color: rgb(255,0,0)
            - value: 'off'
              icon: phu:double-window-close
              styles:
                name: null
                icon:
                  - color: white
          type: custom:button-card
  header_door2_var:
    styles:
      grid:
        - grid-template-areas: '"temp n door door2"'
        - grid-template-columns: max-content 1.5fr min-content min-content
        - grid-template-rows: 1fr min-content min-content
    custom_fields:
      door:
        card:
          entity: |
            [[[ return variables.door ]]]
          styles:
            card:
              - background-color: '#242e42'
              - width: 25px
              - box-shadow: none
              - right: 20px
            icon:
              - width: 20px
          layout: vertical
          name: []
          state:
            - value: 'on'
              icon: phu:double-window-open
              styles:
                state: null
                card:
                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                icon:
                  - color: rgb(255,0,0)
            - value: 'off'
              icon: phu:double-window-closed
              styles:
                name: null
                icon:
                  - color: white
          type: custom:button-card
      door2:
        card:
          entity: |
            [[[ return variables.door2 ]]]
          styles:
            card:
              - background-color: '#242e42'
              - width: 25px
              - box-shadow: none
            icon:
              - width: 20px
          layout: vertical
          name: []
          state:
            - value: 'on'
              icon: phu:double-window-open
              styles:
                state: null
                card:
                  - filter: drop-shadow(0 0 1.0rem rgb(243,156,15))
                icon:
                  - color: rgb(255,0,0)
            - value: 'off'
              icon: phu:double-window-closed
              styles:
                name: null
                icon:
                  - color: white
          type: custom:button-card
